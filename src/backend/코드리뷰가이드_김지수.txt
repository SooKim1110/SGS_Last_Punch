< 코드리뷰 가이드 >

** 해당 디렉토리 파일에 '코드리뷰가이드_김지수.md' 파일을 참고해주시면 문서를 마크다운으로 편하게 보실수있습니다! **


안녕하세요. 라스트펀치 팀에서 백엔드를 맡은 김지수입니다.
인증 서버, 노트 서버, 게이트웨이 등을 담당하여 개발했고, 모든 서버는 Spring Boot를 사용했습니다.
해당 문서에는 코드 리뷰를 위한 가이드가 작성되어 있으며, 작동 방식이나 자세한 설명은 각 서버 디렉토리의 README를 참고해주세요.

[ 노트 서버 ]
- 노트 기능은 크게 2가지 Spring Boot 프로젝트(http-server, websocket-server)로 구현했습니다.
1) http-server: 노트 생성, 조회, 수정, 삭제 & Operation 추가, 조회 등의 REST API
- /controller: NoteMainController는 노트 생성, 조회, 삭제 API, NoteUpdateController는 노트 수정, Operation 추가, 조회 API를 담당합니다.
- /service: controller 네이밍과 동일하게 NoteMainService와 NoteUpdateService 파일에서 각 컨트롤러의 비즈니스 로직을 처리합니다. MongoTemplate을 사용하여 MongoDB 연산을 수행합니다.
- /dto: 노트와 관련된 dto는 NoteDto 클래스 안의 하위 클래스들로 생성하였습니다.

2) websocket-server: WebSocket, STOMP, Redis를 사용하여 노트 선점 관리, 업데이트 알림(노트, 제목), 접속자 관리
- /config: 메세지 pub/sub을 위한 RedisConfig, 토큰 인증을 위한 StompInterceptor, 웹소켓 메세지 브로커 설정을 위한 WebsocketConfig 파일이 존재합니다.
- /controller: 클라이언트에서 publish한 메세지는 pubNote 메소드에서 처리하며, 클라이언트와 웹소켓 세션이 끊어질 경우 onDisconnectEvent 메소드에서 이를 처리합니다.
- /entity: 클라이언트가 publish하는 모든 메세지는 Payload 엔티티의 형태로 오며, 현재 선점자와 접속자 리스트는 StatusInfo 엔티티의 형태로 클라이언트에게 전송됩니다.
- /service: published 된 메세지의 종류에 따라 NoteService에서 처리가 이루어집니다.
            RedisService에서 StringRedisTemplate를 이용하여 Redis에서 유저 세션 정보, 선점자 정보, 접속자 리스트 정보 관리할 수 있도록 메소드를 작성했습니다.

MSA 구조의 인증 시스템을 만들기 위해 인증 서버, Spring Cloud Gateway, Spring Cloud Eureka를 사용하였습니다.
[ 인증 서버 ]
- 회원가입, 로그인, 토큰 생성을 담당합니다.
- /common: 예외처리는 exception 폴더 안의 파일과 GlobalExceptionHandler를 통해 관리합니다. 토큰 생성은 jwt 폴더 안의 JwtProvider를 사용합니다.
- /controller: LoginController에서 로그인 API를, SignupController에서 회원가입 API를 담당합니다. AuthController에는 이메일 인증, 토큰 재발급 등 기타 모든 API를 담당합니다.
- /service: LoginService에서 로그인 시 토큰을 발급해주는 로직(login)을 작성하였습니다.
            AuthService에서 refresh 토큰을 통해 access token을 재발급 받는 로직(reissue), 로그아웃(logout)하는 로직을 작성하였습니다.
            EmailVerifyService에는 이메일 인증(6자리 인증 코드 발급)과 관련된 로직을 작성하였습니다.

[ 게이트웨이 ]
- 라우팅은 GatewayApplication.java 파일에 작성하였습니다. Spring Cloud Eureka를 사용하여 각 서버들의 주소를 받아 라우팅합니다.
- /filter: 라우팅 하기 전 AccessTokenFilter를 거쳐 access token이 유효한 경우에만 요청한 주소로 라우팅을 해줍니다.
           만약 유효하지 않으면 클라이언트에서 /auth/reissue API로 요청을 보내 토큰을 재발급받는데 이 경우에는 RefreshTokenFilter를 거쳐 refresh token이 유효한지 검증한 후 라우팅을 해줍니다.
- application.yml 파일에서 CORS 설정을 했습니다.
